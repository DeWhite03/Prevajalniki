<?xml version="1.0" encoding="UTF-8" standalone="no"?><?xml-stylesheet type="text/xsl" href="../lib/xsl/lexan.xsl"?><lexan><token kind="COMMENT" lexeme="# ''"><location loc="1.1 - 1.4"/></token><token kind="TYPE" lexeme="typ"><location loc="2.1 - 2.3"/></token><token kind="INT" lexeme="int"><location loc="2.5 - 2.7"/></token><token kind="INTCONST" lexeme="123"><location loc="2.9 - 2.11"/></token><token kind="IDENTIFIER" lexeme="integer"><location loc="3.1 - 3.7"/></token><token kind="ASSIGNMENT" lexeme="="><location loc="3.9 - 3.9"/></token><token kind="NULL" lexeme="null"><location loc="3.11 - 3.14"/></token><token kind="IDENTIFIER" lexeme="str"><location loc="4.1 - 4.3"/></token><token kind="ASSIGNMENT" lexeme="="><location loc="4.5 - 4.5"/></token><token kind="STRCONST" lexeme="&quot;Thi s is a str ing&quot;"><location loc="4.7 - 4.26"/></token><token kind="CHARCONST" lexeme="'\0x20'"><location loc="5.1 - 5.7"/></token><token kind="CHARCONST" lexeme="'\0x3A'"><location loc="5.9 - 5.15"/></token><token kind="CHARCONST" lexeme="'\0x7E'"><location loc="5.17 - 5.23"/></token><token kind="IDENTIFIER" lexeme="asdf"><location loc="6.1 - 6.4"/></token><token kind="COMMENT" lexeme="# this is a comment"><location loc="6.6 - 6.24"/></token><token kind="COMMENT" lexeme="# char c = '0xAA'"><location loc="7.1 - 7.17"/></token><token kind="INT" lexeme="int"><location loc="8.1 - 8.3"/></token><token kind="IDENTIFIER" lexeme="b"><location loc="8.5 - 8.5"/></token><token kind="ASSIGNMENT" lexeme="="><location loc="8.7 - 8.7"/></token><token kind="CHARCONST" lexeme="'c'"><location loc="8.9 - 8.11"/></token><token kind="INT" lexeme="int"><location loc="9.1 - 9.3"/></token><token kind="IDENTIFIER" lexeme="d"><location loc="9.5 - 9.5"/></token><token kind="ASSIGNMENT" lexeme="="><location loc="9.7 - 9.7"/></token><token kind="CHARCONST" lexeme="'r'"><location loc="9.9 - 9.11"/></token><token kind="AND" lexeme="&amp;"><location loc="10.1 - 10.1"/></token><token kind="OR" lexeme="|"><location loc="10.3 - 10.3"/></token><token kind="EQ" lexeme="=="><location loc="10.5 - 10.6"/></token><token kind="NEQ" lexeme="!="><location loc="10.8 - 10.9"/></token><token kind="LT" lexeme="&lt;"><location loc="10.11 - 10.11"/></token><token kind="GT" lexeme="&gt;"><location loc="10.13 - 10.13"/></token><token kind="LTE" lexeme="&lt;="><location loc="10.15 - 10.16"/></token><token kind="GTE" lexeme="&gt;="><location loc="10.18 - 10.19"/></token><token kind="STAR" lexeme="*"><location loc="10.21 - 10.21"/></token><token kind="DIV" lexeme="/"><location loc="10.23 - 10.23"/></token><token kind="MOD" lexeme="%"><location loc="10.25 - 10.25"/></token><token kind="PLUS" lexeme="+"><location loc="10.27 - 10.27"/></token><token kind="MINUS" lexeme="-"><location loc="10.29 - 10.29"/></token><token kind="NOT" lexeme="!"><location loc="10.31 - 10.31"/></token><token kind="DOT" lexeme="."><location loc="10.33 - 10.33"/></token><token kind="POW" lexeme="^"><location loc="10.35 - 10.35"/></token><token kind="ASSIGNMENT" lexeme="="><location loc="10.37 - 10.37"/></token><token kind="COLON" lexeme=":"><location loc="10.39 - 10.39"/></token><token kind="COMMA" lexeme=","><location loc="10.41 - 10.41"/></token><token kind="LBRACE" lexeme="{"><location loc="10.43 - 10.43"/></token><token kind="RBRACE" lexeme="}"><location loc="10.45 - 10.45"/></token><token kind="LPAR" lexeme="("><location loc="10.47 - 10.47"/></token><token kind="RPAR" lexeme=")"><location loc="10.49 - 10.49"/></token><token kind="LBRACKET" lexeme="["><location loc="10.51 - 10.51"/></token><token kind="RBRACKET" lexeme="]"><location loc="10.53 - 10.53"/></token><token kind="BOOL" lexeme="bool"><location loc="11.1 - 11.4"/></token><token kind="CHAR" lexeme="char"><location loc="11.6 - 11.9"/></token><token kind="IDENTIFIER" lexeme="doing"><location loc="11.11 - 11.15"/></token><token kind="ELSE" lexeme="else"><location loc="11.17 - 11.20"/></token><token kind="END" lexeme="end"><location loc="11.22 - 11.24"/></token><token kind="FALSE" lexeme="false"><location loc="11.26 - 11.30"/></token><token kind="FUN" lexeme="fun"><location loc="11.32 - 11.34"/></token><token kind="IF" lexeme="if"><location loc="11.36 - 11.37"/></token><token kind="IN" lexeme="in"><location loc="11.39 - 11.40"/></token><token kind="INT" lexeme="int"><location loc="11.42 - 11.44"/></token><token kind="LET" lexeme="let"><location loc="11.46 - 11.48"/></token><token kind="NULL" lexeme="null"><location loc="11.50 - 11.53"/></token><token kind="RETURN" lexeme="return"><location loc="11.55 - 11.60"/></token><token kind="SIZEOF" lexeme="sizeof"><location loc="11.62 - 11.67"/></token><token kind="THEN" lexeme="then"><location loc="11.69 - 11.72"/></token><token kind="TRUE" lexeme="true"><location loc="11.74 - 11.77"/></token><token kind="TYPE" lexeme="typ"><location loc="11.79 - 11.81"/></token><token kind="VAR" lexeme="var"><location loc="11.83 - 11.85"/></token><token kind="VOID" lexeme="void"><location loc="11.87 - 11.90"/></token><token kind="WHILE" lexeme="while"><location loc="11.92 - 11.96"/></token><token kind="STRCONST" lexeme="&quot;&amp; | == != &lt; &gt; &lt;= &gt;= * / % + - ! . ^ = : , { } ( ) [ ]&quot;"><location loc="12.1 - 12.55"/></token><token kind="STRCONST" lexeme="&quot;bool char do else end false fun if in int&quot;"><location loc="13.1 - 13.43"/></token><token kind="STRCONST" lexeme="&quot; let null return sizeof\&quot;\&quot;\\ then true typ var void while&quot;"><location loc="13.44 - 13.103"/></token><token kind="CHARCONST" lexeme="'\\'"><location loc="14.1 - 14.4"/></token><token kind="CHARCONST" lexeme="'\''"><location loc="15.1 - 15.4"/></token><token kind="EOF" lexeme=""/></lexan>